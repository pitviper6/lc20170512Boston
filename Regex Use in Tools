---
title: "Exercise: Working with Regular Expressions (Regex) in Tools"
teaching: 0
exercises: 45
questions:
- "How can I find specific text strings using regular expressions?"
objectives:
- "Evaluate the quirks of how a tool uses Regex."
- "Become comfortable with Regex characters and logic."
- "Find specific text strings using regex."
keypoints:
- "Regular expressions are flexible and useful for evaluating text."
- "There may be more than one regular expression do find a particular text string."
---

## Using Regular Expressions in Tools

During the Regex lesson, we used group discussion and pens and paper to work with regular expressions. This exercise is meant to give you experience with using regular expressions in a tool of your choosing. Many tools support regular expressions, and here is a list of tools that will be able to use the .txt file for this exercise. Note that Excel also supports regular expressions, but this particular file is not best suited for using Excel. Some options are:

Free:
Notepad++ (https://notepad-plus-plus.org/)
Atom (https://atom.io/)
Sublime ()
Brackets

Proprietary:
UltraEdit
Microsoft Word

>## Small Anomalies When Working with Regular Expressions

>I found that I had to copy and paste the apostrophe character to make it work in my regex. I don't >know why, but if you run into weird character behavior for ambiguous characters like apostrophes, try >a cut and paste.

>Different editors may use slightly different 'types' of regex. (Word is slightly different than >Notepad which may be slightly different than Atom). It is a good idea to do a quick Google search on >your particular flavor of Regex before you start in case it has a quirk.
>{: .callout}

 ## Working With the Regular Expressions Used in the Workshop

> ## Exercise 1
> Paste the example from the lesson: \b[Oo]rgani.e\w{2}\b

> What do you find?
> {: .challenge}

> # Solution

> Nothing! Why?

> This expression would match

> organisers
> Organizers
> organifers
> Organi2ek1

> None of these strings appear in the document.

> {: .solution}

> ## Exercise 2

> Edit the expression by deleting the "e". What do you find using this expression?

> {: .challenge}

> ## Solution

> organized
> organizer
> organisms

> By deleting the "e", you reduce the spaces counted, thus allowing the string to find the shorter string.

> {: .solution}

> ## Exercise 3
>Now change the number "2" to the number "5".  How does that change the results? What if you want to find the plural and singular forms?

> {: .challenge}

> ## Solution

> Quite a bit - changing the number to "5" allows the following string to be found:

> organization

> To find the plural and the singular, add a ",6" to the numbers:

> \b[Oo]rgani.\w{5,6}\b

>Why not just add a wild card at the end? That would find other forms of the word, like >'organizational' that you don't want if you are merely trying to find the singular and plural
> {: .solution}

## Finding Various Forms of 'PI' and 'co-PI' in Text

> ## Exercise 1
>Let's say you want to find all references to principle investigators, including plurals, possessives >and co-PIs. Let's start with finding the string 'PI' and the plural. How would you do it?  How about finding 'co-pi'?
> {: .challenge}

> ## Solution to PI and plural

> \bPI\b
> \bPI[(,']\b

> \bPI[s?]\b|\bPI\b finds singluar and plural PI. However, if you click through the results, you see it does not capture the entire string 'PI(s)'. Why? Because the "(" is considered a special character and thus not counted as a character. Therefore, you need to search for either the apostrophe or the left parenthesis within brackets.
> {: .solution}

> ## Solution to co-PI and plural

> \b\w{2}PI\w{1}\b looks like a good solution, but it doesn't work in this context. It picks up "rapid" and "topic" but not the co-.  Why? Oh yes, the "-" isn't counted as a character. You search this either by assuming a dash is present in all co-PI forms, or you can use the \W to pick up any non-word character (such as a space):

> \b\w{2}-PI\w{1}\b
> This expression will find "co-PI" and the plural.

>\b\w{2}\WPI\w{1}\b
>These will also find "by PIs" as well as "co-PIs"

> Experiment with the various character expressions (\d, \w, \s, \D, \W, \S). Which one only returns the string "co-PIs"?

> Answer:  /S. It finds one character that is not a whitespace character.
> {: .solution}

 ## ## Finding Various Forms of 'principal investigator' and 'Principal Investigator' in Text
***Make sure case sensitivity is turned on
> {: .challenge}

> ## Solution to case-sensitive principal investigator/Principal Investigator

>principal investigator

> Answers (number of instances found in parens):
> \bprincipal investigator\b (2)
> \bprincipal\sinvestigator\b (2)
> \b[p]rincipal\s[i]nvestigator\b (2)

> Principal Investigator

> Answers:
> \bPrincipal Investigator\b (5)
> \bPrincipal\sInvestigator\b (5)
> \b[P]rincipal\s[I]nvestigator\b (5)
> {: .solution}

> ## Find Principal Investigator (only the singular, non-possesive form)
> {: .challenge}

> ## Solution to the singular, non-possessive form for Principal Investigator
>\bPrincipal Investigator\s\b (1: \s matches a space)

>However, upon further inspection, you may have an instance with a comma, so you will want to add that possibility:
>\b[P]rincipal\s[I]nvestigator\b[,|\s] (2: matches a comma OR a space)
> {: .solution}

> ## Find Principal Investigator, plural or possessive
> {: .challenge}

> ## Solution to Principal Investigator, plural or possessive
>\b[P]rincipal\s[I]nvestigator\b\W  (5: the \W matches any character that isn't a word character)
> {: .solution}

> ## What does this expression find?

>Take a look at this Regex string and try to figure out what it is searching for (hint: look for what is happening outside of the brackets):
  \b[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}\b
> {: .challenge}

> ## Solution to what \b[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}\b finds

> It will find email addresses. The "@" and the escaped period should have been a hint!
